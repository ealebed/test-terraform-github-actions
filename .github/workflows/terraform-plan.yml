# This workflow is configured to run what's known as a speculative plan in HCP Terraform.
# Speculative plans are plan-only runs to test changes to configuration. Perfect for code reviews on a Pull Request.
#
# This workflow is configured to trigger when a pull request is opened against your `main` branch,
# **IF** the set paths contain files that have changed. If the workflow runs, the included steps will upload your terraform configuration, create a new run, and output the plan information to a PR comment.
#
# NOTE: The last step in this template includes a script that will upsert a PR comment. (REQUIRES `Read and write permissions`)
---
  name: HCP Terraform Plan
  
  on:
    pull_request:
      branches:
      ## Change for your target branch, or include branches you wish to trigger this workflow file.
        - main
      ## Specify to only run this workflow file when terraform configuration has changed.
      paths:
        - "terraform/**.tf" ## Example: 'terraform/**.tf'
  
  ## Add shared Environment Variables across jobs here ##
  env:
    TF_CLOUD_ORGANIZATION: "${{ vars.TF_CLOUD_ORGANIZATION }}" ## Name of your existing HCP Terraform Organization.
    TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}" ## HCP Terraform API Token.
    TF_WORKSPACE: "learn-terraform-github-actions" ## Name of your existing workspace in HCP Terraform.
    CONFIG_DIRECTORY: "./terraform" ## Directory of your Terraform Configuration. Relative to the project root.
    ## Additional env variables
    # TF_LOG: DEBUG ## Helpful for troubleshooting
    # TF_MAX_TIMEOUT: "30m" ## If you wish to override the default "1h"

  jobs:
    terraform-cloud-speculative-run:
      name: "HCP Terraform Plan"
      runs-on: ubuntu-latest
      permissions:
        contents: read
        pull-requests: write
      ## OPTIONAL: can scope variables to this specific job
      ## Example:
      # env:
      #  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORG }}
      steps:
        - name: Checkout
          uses: actions/checkout@v4
  
        - name: Upload Configuration
          uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
          id: plan-upload
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            directory: ${{ env.CONFIG_DIRECTORY }}
            speculative: true
  
        - name: Create Plan Run
          uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
          id: plan-run
          ## run may fail, if so continue to output PR comment
          ## step.terraform-cloud-check-run-status will fail job after pr comment is created/updated.
          continue-on-error: true
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
            plan_only: true
            ## OPTIONAL: set your own message for run. A default message will be defined for you.
            ## Example:
            # message: "Triggered From GitHub Actions CI ${{ github.sha }}"
  
        - name: Get Plan Output
          uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
          id: plan-output
          with:
            plan: ${{ steps.plan-run.outputs.plan_id }}
            # plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
  
        ## REQUIRED: Workflow permissions: `Read and write permissions`
        ## GITHUB_TOKEN is the built in token provided by GitHub Actions. It will need to be set to "permissive" in your repository settings
        ## More information can be found here: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository
        - name: Update PR
          uses: actions/github-script@v7
          id: plan-comment
          if: github.event_name == 'pull_request'
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
              })
              const output = `#### HCP Terraform Plan Output
                 \`\`\`\n
                 Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                 \`\`\`
                 [HCP Terraform Plan](${{ steps.plan-run.outputs.run_link }})
                 `
              // 3. If we have a comment, update it, otherwise create a new one
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }
  
        ## Check Run Status, if not planned_and_finished fail the job
        - name: Check Run Status
          id: terraform-cloud-check-run-status
          if: ${{ steps.plan-run.outputs.run_status != 'planned_and_finished'}}
          run: |
            echo "HCP Terraform Run Failed or Requires Further Attention"
            echo "Run Status: '${{ steps.plan-run.outputs.run_status }}'"
            echo "${{ steps.plan-run.outputs.run_link }}"
            exit 1
